CREATE VIEW v_lagerbestand AS
SELECT
    f.name AS futtersorte,
    f.mengeKg AS verfuegbarer_bestand
FROM futter f;

CREATE VIEW v_tierKrankheiten AS
SELECT
    t.tierId,
    t.name AS tiername,
    k.name AS krankheit,
    k.ansteckend,
    k.behandlungsmassnahme
FROM tier t
JOIN infizierung i ON i.tierId = t.tierId
JOIN krankheit k ON k.krankheitId = i.krankheitId;

CREATE VIEW v_schwangerschaft AS
SELECT
    t.tierId,
    t.name AS tiername
FROM tier t
WHERE t.schwanger = 1;

CREATE VIEW v_tierInfo AS
SELECT
    t.tierId,
    t.name AS tiername,
    t.tiersorte,
    t.tierart,
    t.geschlecht,
    t.jahre AS alter,
    t.geburtstag,
    t.herkunft,
    f.name AS futtersorte,
    g.name AS gehege,
    CASE
        WHEN vs.tierId IS NOT NULL THEN 'Schwanger'
        ELSE 'Nicht Schwanger'
    END AS schwangerschaft_status,
    tk.krankheit,
    tk.ansteckend,
    tk.behandlungsmassnahme
FROM tier t
JOIN futtertrog ft ON ft.gehegeId = t.gehegeId
JOIN futter f ON f.futterId = ft.futterId
JOIN gehege g ON g.gehegeId = t.gehegeId
LEFT JOIN v_schwangerschaft vs ON vs.tierId = t.tierId
LEFT JOIN v_tierKrankheiten tk ON tk.tierId = t.tierId;


CREATE TRIGGER trg_FutterBestellung
    AFTER UPDATE ON futter
    FOR EACH ROW
    WHEN NEW.MengeKg < 50 AND OLD.MengeKg >= 50
BEGIN
    INSERT INTO log (typ, detail)
    VALUES ('bestellung', '800 KG ' || NEW.name || ' wurden zur Bestellung hinzugef√ºgt');
END;

CREATE TRIGGER trg_SchwangerschaftStatus
AFTER UPDATE ON tier
FOR EACH ROW
BEGIN
    INSERT INTO log (typ, detail)
    SELECT 'Schwangerschaft', 'Tier ' || NEW.name || ' wurde schwanger.'
    WHERE NEW.Schwanger = 1 AND OLD.Schwanger = 0;
    INSERT INTO log (typ, detail)
    SELECT 'Schwangerschaft', 'Tier ' || NEW.name || ' ist nicht mehr schwanger.'
    WHERE NEW.Schwanger = 0 AND OLD.Schwanger = 1;
END;

CREATE TABLE log (
	logId INTEGER PRIMARY KEY AUTOINCREMENT,
	typ TEXT,
	detail TEXT,
	datum TEXT DEFAULT (strftime('%Y-%m-%d %H:%M:%S', 'now'))
);
